#!/bin/bash

set -e

## CONFIGURATION
# Local Manifest Configuration (these can be blank if you're not using local manifests)
LM_AOKP="http://teamacid.github.com/AOKP/local_manifest.xml"
LM_CM7="http://teamacid.github.com/CM7/local_manifest.xml"
LM_CM9="http://teamacid.github.com/CM9/local_manifest.xml"
LM_GUMMY="http://teamacid.github.com/Gummy/local_manifest.xml"
# Repo Configuration
DLJOBS=4                           # number of concurrent downloads
# Device Configuration
MANUFACTURER=samsung
DEVICE=galaxys4gmtd
# User Configuration
GOOUSER=TeamAcid
## END CONFIGURATION

MAJVERSION=0
MINVERSION=3
RELVERSION=4

export PATH="~/bin:$PATH"

# Start the timer
START_TIME=$(date +%s)

# Command line arguments
ARCH=$(uname -m)
ACIDIFY_CMD=$(readlink -f $0)
ACIDIFY_DIR=$(dirname $ACIDIFY_CMD)
ACIDIFY_LINK=~/bin/acidify
if [ x"${ANDROID_BUILD_TOP}" = x"" ]
then
    RESDIR=`pwd`
else
    RESDIR=${ANDROID_BUILD_TOP}
fi
command="${1}"
arg="${2}"

# Utility Functions
function error()
{
    echo -en "Error: ${*}" | color red
    abort
}

function abort()
{
    exit 1
}

function setbuildtype()
{
    buildtype="${@}"

    if [ ! -d $RESDIR/.acidify ]
    then
        mkdir -p $RESDIR/.acidify
    fi

    echo $buildtype > $RESDIR/.acidify/buildtype || error "Could not write to $RESDIR/.acidify !\n"
}

function aptgetreq()
{
    . /etc/lsb-release
    case $DISTRIB_CODENAME in
        precise|maya)
            sudo apt-get install git-core gnupg flex bison gperf build-essential \
                zip curl libc6-dev libncurses5-dev:i386 x11proto-core-dev \
                libx11-dev:i386 libreadline6-dev:i386 libgl1-mesa-glx:i386 \
                libgl1-mesa-dev g++-multilib mingw32 openjdk-6-jdk tofrodos \
                python-markdown libxml2-utils xsltproc zlib1g-dev:i386 schedtool \
                pngcrush rsync lib32ncurses5-dev
            sudo ln -fs /usr/lib/i386-linux-gnu/mesa/libGL.so.1 /usr/lib/i386-linux-gnu/libGL.so
            ;;
        oneiric|lisa)
            sudo apt-get install git-core gnupg flex bison gperf build-essential \
                zip curl zlib1g-dev libc6-dev lib32ncurses5-dev ia32-libs \
                x11proto-core-dev libx11-dev lib32readline-gplv2-dev lib32z1-dev \
                libgl1-mesa-dev g++-multilib mingw32 tofrodos python-markdown \
                libxml2-utils xsltproc openjdk-6-jdk schedtool \
                pngcrush rsync
            sudo apt-get install libx11-dev:i386
            ;;
        natty|katya)
            sudo apt-get install git-core gnupg flex bison gperf build-essential \
                zip curl zlib1g-dev libc6-dev lib32ncurses5-dev ia32-libs \
                x11proto-core-dev libx11-dev lib32readline5-dev lib32z-dev \
                libgl1-mesa-dev g++-multilib mingw32 tofrodos python-markdown \
                libxml2-utils xsltproc openjdk-6-jdk schedtool pngcrush rsync
            ;;
        maverick|julia)
            sudo apt-get install git-core gnupg flex bison gperf build-essential \
                zip curl zlib1g-dev libc6-dev lib32ncurses5-dev ia32-libs \
                x11proto-core-dev libx11-dev lib32readline5-dev lib32z-dev \
                libgl1-mesa-dev g++-multilib mingw32 tofrodos python-markdown \
                libxml2-utils xsltproc openjdk-6-jdk schedtool pngcrush rsync
            sudo ln -fs /usr/lib32/mesa/libGL.so.1 /usr/lib32/mesa/libGL.so
            ;;
        lucid|isadora)
            sudo apt-get install git-core gnupg flex bison gperf build-essential \
                zip curl zlib1g-dev libc6-dev lib32ncurses5-dev ia32-libs \
                x11proto-core-dev libx11-dev lib32readline5-dev lib32z-dev \
                libgl1-mesa-dev g++-multilib mingw32 tofrodos python-markdown \
                libxml2-utils xsltproc openjdk-6-jdk schedtool pngcrush rsync
            ;;
        *)
            error "Your version of Ubuntu is unsupported!\n"
            ;;
    esac
}

function installreqpackages()
{
    [[ -f /etc/lsb-release && -r /etc/lsb-release ]] && . /etc/lsb-release
    case $DISTRIB_ID in
        Ubuntu|LinuxMint)
            aptgetreq
            ;;
        *)
            [[ -v DISTRIB_ID ]] || DISTRIB_ID="Your system"
            error "$DISTRIB_ID is unsupported by this script!\n" \
                "Refer to the building Android guide for $DISTRIB_ID\n" \
                "to determine what packages you need.\n"
            ;;
    esac
}

function checkenv()
{
    if [ -f $RESDIR/build/envsetup.sh ]; then
        command -v brunch >/dev/null 2>&1 || . $RESDIR/build/envsetup.sh
    else
        error "Could not run envsetup.sh.\nHave you run " \
            "acidify init yet?"
    fi
}

function cleanenv()
{
    if [ -f $RESDIR/build/envsetup.sh ]; then
        checkenv
        make clobber
    fi
    if [ -d $RESDIR/kernel/$MANUFACTURER/$DEVICE ]; then
        cd $RESDIR/kernel/$MANUFACTURER/$DEVICE
        make distclean
        cd $RESDIR
    fi
    if [ -d $RESDIR/android ]; then
        message "Removing $RESDIR/android\n"
        rm -rf $RESDIR/android
    fi
    if [ -d $RESDIR/platform_manifest ]; then
        message "Removing $RESDIR/platform_manifest\n"
        rm -rf $RESDIR/platform_manifest
    fi
    if [ -d $RESDIR/.repo/manifests ]; then
        message "Removing $RESDIR/.repo/manifests\n"
        rm -rf $RESDIR/.repo/manifests
    fi
    if [ -d $RESDIR/.repo/manifests.git ]; then
        message "Removing $RESDIR/.repo/manifests.git\n"
        rm -rf $RESDIR/.repo/manifests.git
    fi
    if [ -f $RESDIR/.repo/manifest.xml ]; then
        message "Removing $RESDIR/.repo/manifest.xml\n"
        rm -f $RESDIR/.repo/manifest.xml
    fi
    if [ -f $RESDIR/.repo/local_manifest.xml ]; then
        message "Removing $RESDIR/.repo/local_manifest.xml\n"
        rm -f $RESDIR/.repo/local_manifest.xml
    fi
}

function color()
{
    # make the color bold
    BOLD=1\;

    function red {
        COLOR=31
    }

    function green {
        COLOR=32
    }

    function yellow {
        COLOR=33
    }

    while (($#));
    do
        $1
        shift
    done

    echo -en "\E["$BOLD""$COLOR"m"
    cat
    echo -en "\033[0m"
}

function message() {
    # Piping the output in case we want to override the color
    echo -en ${*} | color green
}

# Usable Functions

function setup()
{
    mkdir -p ~/bin
    message "Making Acidify available from any directory\n"
    if [ ! -f $ACIDIFY_LINK ]; then
        ln -s $ACIDIFY_CMD $ACIDIFY_LINK
    fi
    message "Installing required packages for building Android\n"
    installreqpackages
    message "Fetching the latest version of repo\n"
    curl https://dl-ssl.google.com/dl/googlesource/git-repo/repo > ~/bin/repo
    chmod a+x ~/bin/repo
    message "Your machine is ready to setup the Android build environment\n"
    message "Please see http://source.android.com/source/initializing.html for\n"
    message "instructions on setting up ADB and the udev rules required.\n"
}

function init()
{
    command -v repo >/dev/null 2>&1 || error "You don't have the repo utility!\nRun 'acidify setup' to correct this.\n"
    message "Attempting to initialize environment to build type $arg\n"
    message "This WILL REMOVE ALL LOCAL CHANGES\n"
    case $arg in
        aokp)
            setbuildtype "AOKP"
            cleanenv
            message "Initializing repository\n"
            repo init -u https://github.com/AOKP/platform_manifest.git -b ics
            if [ x"$LM_AOKP" != x"" ]; then
                message "Fetching $buildtype local manifest"
                curl $LM_AOKP > $RESDIR/.repo/local_manifest.xml
            fi
            message "Syncing changes with upstream\n"
            repo sync -j$DLJOBS -f -d
            message "Starting all projects on task branch ics"
            repo start --all ics
            ;;
        cm7)
            setbuildtype "CM7"
            cleanenv
            message "Initializing repository\n"
            repo init -u https://github.com/CyanogenMod/android.git -b gingerbread
            if [ x"$LM_CM7" != x"" ]; then
                message "Fetching $buildtype local manifest"
                curl $LM_CM7 > $RESDIR/.repo/local_manifest.xml
            fi
            message "Syncing changes with upstream\n"
            repo sync -j$DLJOBS -f -d
            message "Starting all projects on task branch gingerbread"
            repo start --all gingerbread
            $RESDIR/vendor/cyanogen/get-rommanager
            ;;
        cm9)
            setbuildtype "CM9"
            cleanenv
            message "Initializing repository\n"
            repo init -u https://github.com/CyanogenMod/android.git -b ics
            if [ x"$LM_CM9" != x"" ]; then
                message "Fetching $buildtype local manifest"
                curl $LM_CM9 > $RESDIR/.repo/local_manifest.xml
            fi
            message "Syncing changes with upstream\n"
            repo sync -j$DLJOBS -f -d
            message "Starting all projects on task branch ics"
            repo start --all ics
            $RESDIR/vendor/cm/get-prebuilts
            ;;
        gummy)
            setbuildtype "Gummy"
            cleanenv
            message "Initializing repository\n"
            repo init -u https://github.com/teamgummy/platform_manifest.git -b master
            if [ x"$LM_GUMMY" != x"" ]; then
                message "Fetching $buildtype local manifest"
                curl $LM_GUMMY > $RESDIR/.repo/local_manifest.xml
            fi
            message "Syncing changes with upstream\n"
            repo sync -j$DLJOBS -f -d
            cd $RESDIR/vendor/Gummy
            ./get-prebuilts
            ;;
        *)
            error "That configuration does not exist!\n"
            abort
            ;;
    esac
}

function config()
{
    checkenv
    case $buildtype in
        AOKP)
            lunch aokp_$DEVICE-userdebug
            ;;
        CM9)
            lunch cm_$DEVICE-userdebug
            ;;
        CM7)
            lunch cyanogen_$DEVICE-eng
            ;;
        Gummy)
            lunch Gummy_$DEVICE-userdebug
            ;;
        *)
            error "Invalid build type!\n"
            ;;
    esac
}

function build()
{
    build_argument="bacon"
    message "Building $buildtype\n"
    checkenv
    config
    if [ "$buildtype" = "AOKP" -a "$DEVICE" = "galaxys4gmtd" ]; then
        # Messy workaround for building AOKP. This will get fixed using a makefile
        # Redundant call to bootimage so we can generate bml_over_mtd
        mka bootimage
        cp kernel/samsung/galaxys4gmtd/usr/galaxys4gmtd_initramfs_files/bml_over_mtd \
            out/target/product/galaxys4gmtd/utilities/bml_over_mtd
    fi
    if [ "$buildtype" = "CM7" -a "$DEVICE" = "galaxys4gmtd" ]; then
        $RESDIR/kernel/samsung/galaxys4gmtd/build.sh build
    fi
    if [ "$buildtype" = "Gummy" ]; then
        build_argument="gummy"
    fi

    mka "$build_argument"
}

function clean()
{
    if [ -d $RESDIR/kernel/$MANUFACTURER/$DEVICE ]; then
        cd $RESDIR/kernel/$MANUFACTURER/$DEVICE
        make distclean
        cd $RESDIR
    fi
    make clobber
}

function release()
{
    clean
    build
}

function deploy()
{
    command -v adb >/dev/null 2>&1 || error "ADB is not installed and/or in your PATH, so I cannot deploy!\n"
    BUILD_DATE=$(date -u +%Y%m%d)
    case $buildtype in
        AOKP)
            # AOKP is annoying about naming its builds
            # Someone that builds for AOKP should definitely fix this
            AOKP_BUILD=6
            device_build=$DEVICE"_milestone"
            rm_zip_path=/sdcard/aokp_$DEVICE*.zip
            local_zip_path=out/target/product/$DEVICE/aokp_$device_build-$AOKP_BUILD.zip
            remote_zip_path=/sdcard/aokp_$device_build-$AOKP_BUILD.zip
            ;;
        CM9)
            rm_zip_path=/sdcard/cm-9-*.zip
            local_zip_path=out/target/product/$DEVICE/cm-9-$BUILD_DATE-UNOFFICIAL-$DEVICE.zip
            remote_zip_path=/sdcard/cm-9-$BUILD_DATE-UNOFFICIAL-$DEVICE.zip
            ;;
        CM7)
            rm_zip_path=/sdcard/cm-7-*.zip
            local_zip_path=out/target/product/$DEVICE/cm-7-$BUILD_DATE-UNOFFICIAL-$DEVICE.zip
            remote_zip_path=/sdcard/cm-7-$BUILD_DATE-UNOFFICIAL-$DEVICE.zip
            ;;
        Gummy)
            # TODO: Figure out a better way of getting the ZIP'S date, not the current date
            #       since Gummy uses hour and minute along with the build date
            gummy_build_date=$(date +%Y-%m-%d-%H_%m)
            rm_zip_path=/sdcard/Gummy_*.zip
            local_zip_path=out/target/product/$DEVICE/Gummy_$DEVICE-Release-$gummy_build_date.zip
            remote_zip_path=/sdcard/Gummy_$DEVICE-Release-$gummy_build_date.zip
            ;;
        *)
            error "Not a valid build type!\n"
            ;;
    esac
    if [ -f "$local_zip_path" ]; then
        message "Waiting for your Android device to be detected...\n"
        message "If this operation takes too long try unplugging and plugging your phone back in.\n"
        adb wait-for-device
        message "Removing old build(s)!\n"
        adb shell rm "$rm_zip_path"
        message "Pushing new build!\n"
        adb push "$local_zip_path" "$remote_zip_path"
        message "Operation completed (hopefully successfully).\n"
        message "Rebooting to recovery...\n"
        adb reboot recovery
    else
        error "Could not find the output zip file. Make sure you run a build first.\n"
    fi
}

function upload()
{
    goodir=$(echo $buildtype | tr '[:upper:]' '[:lower:]')
    BUILD_DATE=$(date -u +%Y%m%d)
    case $buildtype in
        AOKP)
            # AOKP is annoying about naming its builds
            # Someone that builds for AOKP should definitely fix this
            AOKP_BUILD=6
            device_build=$DEVICE"_milestone"
            local_zip_path=out/target/product/$DEVICE/aokp_$device_build-$AOKP_BUILD.zip
            remote_zip_path=$GOOUSER@upload.goo.im:/home/$GOOUSER/public_html/$goodir/
            ;;
        CM9)
            local_zip_path=out/target/product/$DEVICE/cm-9-$BUILD_DATE-UNOFFICIAL-$DEVICE.zip
            remote_zip_path=$GOOUSER@upload.goo.im:/home/$GOOUSER/public_html/$goodir/
            ;;
        CM7)
            local_zip_path=out/target/product/$DEVICE/cm-7-$BUILD_DATE-UNOFFICIAL-$DEVICE.zip
            remote_zip_path=$GOOUSER@upload.goo.im:/home/$GOOUSER/public_html/$goodir/
            ;;
        Gummy)
            # TODO: Figure out a better way of getting the ZIP'S date, not the current date
            #       since Gummy uses hour and minute along with the build date
            gummy_build_date=$(date +%Y-%m-%d-%H_%m)
            local_zip_path=out/target/product/$DEVICE/Gummy_$DEVICE-Release-$gummy_build_date.zip
            remote_zip_path=$GOOUSER@upload.goo.im:/home/$GOOUSER/public_html/$goodir/
            ;;
        *)
            error "Not a valid build type!\n"
            ;;
    esac
    if [ -f "$local_zip_path" ]; then
        message "Uploading to goo.im\n"
        message "If you upload fails, just run acidify upload again.\n"
        message "The upload will continue from where it left off.\n"
        rsync --partial --progress -e "ssh -p 2222" "$local_zip_path" "$remote_zip_path"
        message "Uploaded latest build to goo.im\n"
    else
        error "Could not find the output zip file. Make sure you run a build first.\n"
    fi
}

function sync()
{
    repo sync -j$DLJOBS
}

function timer()
{
    END_TIME=$(date +%s)
    ELAPSED=$((END_TIME - START_TIME))
    E_HR=$((ELAPSED / 60 / 60))
    E_MIN=$(((ELAPSED / 60) % 60))
    E_SEC=$((ELAPSED % 60))

    printf "Elapsed Time: " | color yellow
    [ $E_HR != 0 ]  && printf "%d hr(s) "  $E_HR  | color yellow
    [ $E_MIN != 0 ] && printf "%d min(s) " $E_MIN | color yellow
    printf "%d sec(s)\n" $E_SEC | color yellow
}

function update()
{
    message "Removing "
    version
    rm $ACIDIFY_DIR/acidify
    message "Fetching newest version from Github\n"
    curl https://raw.github.com/teamacid/acidify/master/acidify > $ACIDIFY_DIR/acidify
    chmod +x $ACIDIFY_DIR/acidify
    message "Updated to "
    $ACIDIFY_DIR/acidify version
}

function flash()
{
    message "This will flash the latest boot image via heimdall\n"
    message "Make sure you're in download mode!\n"
    command -v heimdall >/dev/null 2>&1 || error "heimdall-cli is not installed, so flashing cannot continue.\n"
    if [ -f "$RESDIR/out/target/product/$DEVICE/boot.img" ]; then
        message "Flashing boot image\n"
        sudo heimdall flash --kernel "$RESDIR/out/target/product/$DEVICE/boot.img"
    else
        error "boot.img does not exist! You probably forgot to build it."
    fi
}

function usage()
{
    message "Usage: acidify [command] (build type)\n"
    message "\n"
    message "Commands:\n"
    message "\tsetup\t\tFetches required packages in additon to repo for building Android\n"
    message "\tinit\t\tInitializes the build environment to build the type specified in the argument\n"
    message "\tconfig\t\tConfigures the build environment for $DEVICE\n"
    message "\tbuild\t\tBuilds a build for the $DEVICE (same as mka bacon)\n"
    message "\tclean\t\tCleans the build environment\n"
    message "\trelease\t\tCompiles a clean build for the $DEVICE\n"
    message "\tdeploy\t\tDeploys a new build to the device's SD card via adb\n"
    message "\tupload\t\tUploads the latest build to goo.im\n"
    message "\tsync\t\tSyncs the latest changes from upstream (same as 'repo sync')\n"
    message "\tupdate\t\tUpdate acidify to the latest and greatest\n"
    message "\tflash\t\tFlash the latest boot image via heimdall\n"
    message "\n\n"
    message "Available build types (case sensitive):\n"
    message "\tcm7\t\tFor CyanogenMod 7\n"
    message "\tcm9\t\tFor CyanogenMod 9\n"
    message "\taokp\t\tFor Android Open Kang Project\n"
    message "\tgummy\t\tFor Team Gummy's ICS ROM\n"
    abort
}

function version()
{
    message "Acidify version $MAJVERSION.$MINVERSION.$RELVERSION\n"
}

function main()
{
    version

    mkdir -p $RESDIR/.acidify

    case $command in
        setup)
            setup
            ;;
        init)
            init
            ;;
        config)
            config
            ;;
        build)
            build
            ;;
        release)
            release
            ;;
        clean)
            clean
            ;;
        deploy)
            deploy
            ;;
        flash)
            flash
            ;;
        upload)
            upload
            ;;
        sync)
            sync
            ;;
        update)
            update
            ;;
        version)
            ;;
        *)
            usage
            ;;
    esac
}

if [ x"${command}" = x"" ]; then
    error "You must supply a command!\n"
    usage
fi
if [ x"${ARCH}" != x"x86_64" ]; then
    error "Only 64-bit machines are supported!\n"
fi
if [ -f $RESDIR/.acidify/buildtype ]; then
    buildtype=$(cat $RESDIR/.acidify/buildtype)
else
    setbuildtype "CM9" # CM9 is what is actively being developed. Let's make it the default.
fi
main
if [ ! x"${command}" = x"version" -o x"${command}" = x"" ]; then
    timer
fi

# vim :set ts=4 sw=4 sts=4 et :
