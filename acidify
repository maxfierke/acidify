#!/bin/bash

set -e

MAJVERSION=0
MINVERSION=2
RELVERSION=2

DLJOBS=4 # number of concurrent downloads (more than 6 may be detrimental)
export PATH="~/bin:$PATH"

# Start the timer
startTime=$(date +%s)

# Command line arguments
arch=$(uname -m)
acidifycmd=$(readlink -f $0)
acidifydir=$(dirname $acidifycmd)
if [ x"${ANDROID_BUILD_TOP}" = x"" ]
then
    resdir=`pwd`
else
    resdir=${ANDROID_BUILD_TOP}
fi
command="${1}"
arg="${2}"

device=galaxys4gmtd
gooUser=TeamAcid

# Utility Functions
function error()
{
    abort_msg "============== Error!!! ==============\n${@}"
    exit 1
}

function abort_msg()
{
    message "${@}\n"
    abort
}

function abort()
{
    exit 1
}

function setbuildtype()
{
    buildtype="${@}"
    
    if [ ! -d $resdir/.acidify ]
    then
        mkdir -p $resdir/.acidify
    fi

    echo $buildtype > $resdir/.acidify/buildtype || error "Could not write to ~/.acidify !\n"
}

function aptgetreq()
{
    . /etc/lsb-release
    case $DISTRIB_CODENAME in
        precise)
            sudo apt-get install git-core gnupg flex bison gperf build-essential \
                zip curl libc6-dev libncurses5-dev:i386 x11proto-core-dev \
                libx11-dev:i386 libreadline6-dev:i386 libgl1-mesa-glx:i386 \
                libgl1-mesa-dev g++-multilib mingw32 openjdk-6-jdk tofrodos \
                python-markdown libxml2-utils xsltproc zlib1g-dev:i386 schedtool
            sudo ln -fs /usr/lib/i386-linux-gnu/mesa/libGL.so.1 /usr/lib/i386-linux-gnu/libGL.so
            ;;
        oneiric)
            sudo apt-get install git-core gnupg flex bison gperf build-essential \
                zip curl zlib1g-dev libc6-dev lib32ncurses5-dev ia32-libs \
                x11proto-core-dev libx11-dev lib32readline5-dev lib32z-dev \
                libgl1-mesa-dev g++-multilib mingw32 tofrodos python-markdown \
                libxml2-utils xsltproc openjdk-6-jdk schedtool
            sudo apt-get install libx11-dev:i386
            ;;
        natty)
            sudo apt-get install git-core gnupg flex bison gperf build-essential \
                zip curl zlib1g-dev libc6-dev lib32ncurses5-dev ia32-libs \
                x11proto-core-dev libx11-dev lib32readline5-dev lib32z-dev \
                libgl1-mesa-dev g++-multilib mingw32 tofrodos python-markdown \
                libxml2-utils xsltproc openjdk-6-jdk schedtool
            ;;
        maverick)
            sudo apt-get install git-core gnupg flex bison gperf build-essential \
                zip curl zlib1g-dev libc6-dev lib32ncurses5-dev ia32-libs \
                x11proto-core-dev libx11-dev lib32readline5-dev lib32z-dev \
                libgl1-mesa-dev g++-multilib mingw32 tofrodos python-markdown \
                libxml2-utils xsltproc openjdk-6-jdk schedtool
            sudo ln -fs /usr/lib32/mesa/libGL.so.1 /usr/lib32/mesa/libGL.so
            ;;
        lucid)
            sudo apt-get install git-core gnupg flex bison gperf build-essential \
                zip curl zlib1g-dev libc6-dev lib32ncurses5-dev ia32-libs \
                x11proto-core-dev libx11-dev lib32readline5-dev lib32z-dev \
                libgl1-mesa-dev g++-multilib mingw32 tofrodos python-markdown \
                libxml2-utils xsltproc openjdk-6-jdk schedtool
            ;;
        *)
            error "Your version of Ubuntu is unsupported!\n"
            ;;
    esac
}

function installreqpackages()
{
    . /etc/lsb-release
    case $DISTRIB_ID in
        Ubuntu)
            aptgetreq
            ;;
        *)
            error "$DISTRIB_ID is unsupported by this script!\nRefer to " \
            "the building Android guide for $DISTRIB_ID\n" \
            "to determine what packages you need"
            ;;
    esac
}

function checkenv()
{
    command -v brunch >/dev/null 2>&1 || . $resdir/build/envsetup.sh
}

function cleanenv()
{
    
    if [ -f $resdir/build/envsetup.sh ]
    then
        checkenv
        make clobber
    fi
    if [ -d $resdir/android ]
    then
        message "Removing $resdir/android\n"
        rm -rf $resdir/android
    fi
    if [ -d $resdir/platform_manifest ]
    then
        message "Removing $resdir/platform_manifest\n"
        rm -rf $resdir/platform_manifest
    fi
    if [ -d $resdir/.repo/manifests ]
    then
        message "Removing $resdir/.repo/manifests\n"
        rm -rf $resdir/.repo/manifests
    fi
    if [ -d $resdir/.repo/manifests.git ]
    then
        message "Removing $resdir/.repo/manifests.git\n"
        rm -rf $resdir/.repo/manifests.git
    fi
    if [ -f $resdir/.repo/manifest.xml ]
    then
        message "Removing $resdir/.repo/manifest.xml\n"
        rm -f $resdir/.repo/manifest.xml
    fi
    if [ -f $resdir/.repo/local_manifest.xml ]
    then
        message "Removing $resdir/.repo/local_manifest.xml\n"
        rm -f $resdir/.repo/local_manifest.xml
    fi
}

function color()
{
    # make the color bold
    BOLD=1\;

    function green {
       COLOR=32
    }

    function yellow {
       COLOR=33
    }

    while (($#));
    do
        $1
        shift
    done

    echo -en "\E["$BOLD""$COLOR"m"
    cat
    echo -en "\033[0m"
}

function message() {
    # Piping the output in case we want to override the color
    echo -en ${*} | color green
}

# Usable Functions

function setup()
{
    mkdir -p ~/bin
    message "Fetching the latest version of repo\n"
    curl https://dl-ssl.google.com/dl/googlesource/git-repo/repo > ~/bin/repo
    chmod a+x ~/bin/repo

    message "Making Acidify available from any directory\n"
    ln -fs $acidifycmd ~/bin/acidify

    message "Installing required packages for building Android\n"
    installreqpackages
    
    message "Your machine is ready to setup the Android build environment\n"
    message "Please see http://source.android.com/source/initializing.html for\n"
    message "instructions on setting up ADB and the udev rules required.\n"
}

function init()
{
    command -v repo >/dev/null 2>&1 || error "You don't have the repo utility!\nRun 'acidify setup' to correct this.\n"
    message "Attempting to initialize environment to build type $arg\n"
    message "This WILL REMOVE ALL LOCAL CHANGES\n"
    case $arg in
        aokp)
            setbuildtype "AOKP"
            cleanenv
            message "Initializing repository\n"
            repo init -u https://github.com/AOKP/platform_manifest.git -b ics
            message "Fetching $buildtype local manifest from Github"
            curl http://teamacid.github.com/$buildtype/local_manifest.xml > $resdir/.repo/local_manifest.xml
            message "Syncing changes with upstream\n"
            repo sync -j$DLJOBS -f -d
            message "Starting all projects on task branch ics"
            repo start --all ics
            ;;
        cm7)
            setbuildtype "CM7"
            cleanenv
            message "Initializing repository\n"
            repo init -u https://github.com/CyanogenMod/android.git -b gingerbread
            message "Fetching $buildtype local manifest from Github"
            curl http://teamacid.github.com/$buildtype/local_manifest.xml > $resdir/.repo/local_manifest.xml
            message "Syncing changes with upstream\n"
            repo sync -j$DLJOBS -f -d
            message "Starting all projects on task branch gingerbread"
            repo start --all gingerbread
            $resdir/vendor/cyanogen/get-rommanager
            ;;
        cm9)
            setbuildtype "CM9"
            cleanenv
            message "Initializing repository\n"
            repo init -u https://github.com/CyanogenMod/android.git -b ics
            message "Fetching $buildtype local manifest from Github"
            curl http://teamacid.github.com/$buildtype/local_manifest.xml > $resdir/.repo/local_manifest.xml
            message "Syncing changes with upstream\n"
            repo sync -j$DLJOBS -f -d
            message "Starting all projects on task branch ics"
            repo start --all ics
            $resdir/vendor/cm/get-prebuilts
            ;;
        *)
            message "That configuration does not exist!\n"
            abort
            ;;
    esac
}

function config()
{
    checkenv
    case $buildtype in
        AOKP)
            lunch aokp_$device-userdebug
            ;;
        CM9)
            lunch cm_$device-userdebug
            ;;
        CM7)
            lunch cyanogen_$device-eng
            ;;
        *)
            error "Invalid build type!\n"
            ;;
    esac
}

function build()
{
    checkenv
    config
    mka bacon
}

function clean()
{
    make clobber
}

function release()
{
    clean
    config
    build
}

function deploy()
{
    command -v adb >/dev/null 2>&1 || error "ADB is not installed/in your PATH, so I can not deploy!\n"
    BUILD_DATE=$(date -u +%Y%m%d)
    case $buildtype in
        AOKP)
            # AOKP is annoying about naming its builds
            # Someone that builds for AOKP should definitely fix this
            AOKP_BUILD=40
            device_build=$device"_build"
            message "Removing old build(s)!\n"
            adb shell rm /sdcard/aokp_$device*.zip
            message "Pushing new build!\n"
            adb push out/target/product/$device/aokp_$device_build-$AOKP_BUILD.zip /sdcard/aokp_$device_build-$AOKP_BUILD.zip
            ;;
        CM9)
            message "Removing old build(s)!\n"
            adb shell rm /sdcard/cm-9-*.zip
            message "Pushing new build!\n"
            adb push out/target/product/$device/cm-9-$BUILD_DATE-UNOFFICIAL-$device.zip /sdcard/cm-9-$BUILD_DATE-UNOFFICIAL-$device.zip
            ;;
        CM7)
            message "Removing old build(s)!\n"
            adb shell rm /sdcard/cm-7-*.zip
            message "Pushing new build!\n"
            adb push out/target/product/$device/cm-7-$BUILD_DATE-UNOFFICIAL-$device.zip /sdcard/cm-7-$BUILD_DATE-UNOFFICIAL-$device.zip
            ;;
        *)
            error "Not a valid build type!\n"
            ;;
    esac
    message "Operation completed (hopefully successfully)\n"
    message "Waiting for Android device...\n"
    adb wait-for-device
    message "Rebooting to recovery...\n"
    adb reboot recovery
}

function upload()
{
    goodir=$(echo $buildtype | tr '[:upper:]' '[:lower:]')
    BUILD_DATE=$(date -u +%Y%m%d)
    case $buildtype in
        AOKP)
            # AOKP is annoying about naming its builds
            # Someone that builds for AOKP should definitely fix this
            AOKP_BUILD=40
            device_build=$device"_build"
            message "Uploading to goo.im\n"
            scp -P 2222 out/target/product/$device/aokp_$device_build-$AOKP_BUILD.zip $gooUser@upload.goo.im:~/public_html/$goodir/
            ;;
        CM9)
            message "Uploading to goo.im\n"
            scp -P 2222 out/target/product/$device/cm-9-$BUILD_DATE-UNOFFICIAL-$device.zip $gooUser@upload.goo.im:~/public_html/$goodir/
            ;;
        CM7)
            message "Uploading to goo.im\n"
            scp -P 2222 out/target/product/$device/cm-7-$BUILD_DATE-UNOFFICIAL-$device.zip $gooUser@upload.goo.im:~/public_html/$goodir/
            ;;
        *)
            error "Not a valid build type!\n"
            ;;
    esac
    message "Uploaded latest build to goo.im\n"
}

function sync()
{
    repo sync -j$DLJOBS
}

function timer()
{
    START=$startTime
    END=$(date +%s)
    ELAPSED=$((END - START))
    E_HR=$((ELAPSED / 60 / 60))
    E_MIN=$(((ELAPSED / 60) % 60))
    E_SEC=$((ELAPSED % 60))

    printf "Elapsed Time: " | color yellow
    [ $E_HR != 0 ]  && printf "%d hr(s) "  $E_HR  | color yellow
    [ $E_MIN != 0 ] && printf "%d min(s) " $E_MIN | color yellow
    printf "%d sec(s)\n" $E_SEC | color yellow
}

function update()
{
    message "Removing "
    version
    rm $acidifydir/acidify
    message "Fetching newest version from Github\n"
    curl https://raw.github.com/teamacid/acidify/master/acidify > $acidifydir/acidify
    chmod +x $acidifydir/acidify
    message "Updated to "
    $acidifydir/acidify version
}

function usage()
{
    message "Usage: acidify [command] (build type)\n"
    message "\n"
    message "Commands:\n"
    message "\tsetup\t\tFetches required packages in additon to repo for building Android\n"
    message "\tinit\t\tInitializes the build environment to build the type specified in the argument\n"
    message "\tconfig\t\tConfigures the build environment for $device\n"
    message "\tbuild\t\tBuilds a build for the $device (same as mka bacon)\n"
    message "\tclean\t\tCleans the build environment\n"
    message "\trelease\t\tCompiles a clean build for the $device\n"
    message "\tdeploy\t\tDeploys a new build to the device's SD card via adb\n"
    message "\tupload\t\tUploads the latest build to goo.im\n"
    message "\tsync\t\trepo sync\n"
    message "\tupdate\t\tUpdate acidify to the latest and greatest\n"
    message "\n\n"
    message "Available build types (case sensitive):\n"
    message "\tcm7\t\tFor CyanogenMod 7\n"
    message "\tcm9\t\tFor CyanogenMod 9\n"
    message "\taokp\t\tFor Android Open Kang Project\n"
    abort
}

function version()
{
    message "Acidify version $MAJVERSION.$MINVERSION.$RELVERSION\n"
}

function main()
{
    version
	
    mkdir -p $resdir/.acidify
	
    case $command in
        setup)
            setup
            ;;
        init)
	        init
	        ;;
        config)
            config
            ;;
        build)
	        build
            ;;
        release)
            release
            ;;
        clean)
            clean
            ;;
        deploy)
            deploy
            ;;
        upload)
            upload
            ;;
        sync)
            sync
            ;;
        update)
            update
            ;;
        version)
            version
            ;;
        *)
            usage
            ;;
    esac
}

if [ x"${command}" = x"" ]
then
    message "============== Error!!! ==============\nYou must supply a command!\n"
    usage
fi
if [ x"${arch}" != x"x86_64" ]
then
    error "Only 64-bit machines are supported!\n"
fi
if [ -f $resdir/.acidify/buildtype ]
then
    buildtype=$(cat $resdir/.acidify/buildtype)
else
    setbuildtype "CM9" # CM9 is what is actively being developed. Let's make it the default.
fi
main
timer

# vim :set ts=4 sw=4 sts=4 et :
